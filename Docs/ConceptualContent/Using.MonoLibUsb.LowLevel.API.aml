<?xml version="1.0" encoding="utf-8"?>
<topic id="9fa3601c-f543-4574-933f-7c3756a2fa67" revisionNumber="1">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>
        The MonoLibUsb Libusb-1.0 low-level API library is a complete implementation of
        <externalLink>
          <linkText>Libusb-1.0</linkText>
          <linkAlternateText>Libusb-1.0</linkAlternateText>
          <linkUri>http://www.libusb.org/</linkUri>
        </externalLink>.
      </para>
    </introduction>
    <prerequisites>
      <content>
        Windows Requires the
        <externalLink>
          <linkText>Libusb-1.0 windows backend driver</linkText>
          <linkAlternateText>Libusb-1.0 windows backend driver</linkAlternateText>
          <linkUri>http://www.libusb.org/wiki/windows_backend</linkUri>
        </externalLink>.
        Uniux-like platforms Requires the
        <externalLink>
          <linkText>Libusb-1.0 driver</linkText>
          <linkAlternateText>Libusb-1.0 driver</linkAlternateText>
          <linkUri>http://www.libusb.org/</linkUri>
        </externalLink>.
      </content>
    </prerequisites>
    <!-- One or more procedure or section with procedure -->

    <!-- Optional additional procedure or section with procedure -->
    <foldSection address="MonoLibUsb.Getting.Started">
      <title>Getting Started with MonoLibUsb</title>
      <content>
        <para>
          Much of the official
          <externalLink>
            <linkText>Libusb-1.0 API Documentation</linkText>
            <linkAlternateText>Libusb-1.0 API Documentation</linkAlternateText>
            <linkUri>http://libusb.sourceforge.net/api-1.0/</linkUri>
          </externalLink>
          also applies to the .NET MonoLibUsb low-level API library. This is an excellent reference for both novice and 
          advanced users. Users unfamiliar with Libusb-1.0 are encouraged to review the official documentation upon 
          getting started.
        </para>
        <para>
          Before using MonoLibUsb a <CREF>T:MonoLibUsb.MonoUsbSessionHandle</CREF> must be created. A session
          handle is required for many of the library functions.
        </para>
        <para>
          The <CREF>T:MonoLibUsb.Profile.MonoUsbProfileList</CREF> is your starting point for discovering, querying and
          opening USB devices. See the
          <link xlink:href="13c6b1b8-f805-45a9-8160-e0b2ea8f3d3f">Show Info Console Application Example</link>.
        </para>
        <para>
          The MonoLibUsb source code can be built as a standalone library, seperate from LibUsbDotNet.
          See the <localUri>[BaseDir]\LibWinUsb\MonoLibUsb\MonoUsb.sln</localUri> in the LibUsbDotNet source.
        </para>
      </content>
    </foldSection>

    <foldSection address="MonoLibUsb.Differences.C">
      <title>Migrating from the Libusb-1.0 C API to the MonoLibUsb .NET API</title>
      <content>
        <para>
          The <CREF>T:MonoLibUsb.MonoUsbApi</CREF> functions have no "libusb_" prefix.and the naming convention is UpperCamelCase. For example, 
          <codeInline>MonoUsbApi.GetConfiguration()</codeInline> instead of <codeInline>libusb_get_configuration()</codeInline>.
        </para>
        <para>
          Functions that deal with freeing, opening and closing (with the exception of asynchronous tranfers) are managed by a <CREF>T:LibUsbDotNet.Main.SafeContextHandle</CREF> class. This ensures all unsafe Libusb-1.0 memory pointers get closed/freed. 
        </para>
        <alert class="warning">
          The user is required to <CREF>M:MonoLibUsb.Transfer.MonoUsbTransfer.Free</CREF> asynchronous transfers. Failure to do so will result in memory leaks.
        </alert>
        <para>
          <legacyBold>The following functions do not exist in the <CREF>T:MonoLibUsb.MonoUsbApi</CREF>:</legacyBold>
          <list class="bullet">
            <listItem>
              <a href="http://libusb.sourceforge.net/api-1.0/group__lib.html#ga9517c37281bba0b51cc62eba728be48b">libusb_init()</a>
            </listItem>
            <listItem>
              <a href="http://libusb.sourceforge.net/api-1.0/group__lib.html#ga9517c37281bba0b51cc62eba728be48b">libusb_exit()</a>
              <para>
                A <CREF>T:MonoLibUsb.MonoUsbSessionHandle</CREF> class is used to manage a <codeInline>libusb_context</codeInline>.  
              </para>
              <para>
                <code lang="c++">
                  // Initialize Context
                  libusb_context *context;
                  libusb_init(&amp;context);

                  // Exit Context
                  libusb_exit(context);
                </code>
                <code>
                  // Initialize Context
                  MonoUsbSessionHandle context = new MonoUsbSessionHandle();

                  // Exit Context
                  context.Close();
                </code>
              </para>
            </listItem>
            <listItem>
              <a href="http://libusb.sourceforge.net/api-1.0/group__dev.html#gad3b8561d064bb3e1b8851ddeed3cd7d6">libusb_free_device_list()</a>
              <para>
              A <CREF>T:MonoLibUsb.Profile.MonoUsbProfileListHandle</CREF> class is used to manage a device list handle. To free a device list handle, call the
              list handles <codeInline>Close()</codeInline> method.
              </para>
            </listItem>
            <listItem>
              <a href="http://libusb.sourceforge.net/api-1.0/group__desc.html#ga18d2b08a065857ff7ae4f3f719c115cc">libusb_free_config_descriptor()</a>
              <para>
                A <CREF>T:MonoLibUsb.Profile.MonoUsbConfigHandle</CREF> class is used to manage a config descriptor. To free a config descriptor, call the
                config handles <codeInline>Close()</codeInline> method.
              </para>
            </listItem>
            <listItem>
              <a href="http://libusb.sourceforge.net/api-1.0/group__dev.html#ga8163100afdf933fabed0db7fa81c89d1">libusb_open()</a>
            </listItem>
            <listItem>
              <a href="http://libusb.sourceforge.net/api-1.0/group__dev.html#ga779bc4f1316bdb0ac383bddbd538620e">libusb_close()</a>
              <para>
                A <CREF>T:MonoLibUsb.MonoUsbDeviceHandle</CREF> class is used to manage a <codeInline>libusb_device_handle</codeInline>.
              </para>
              <para>
                <code lang="c++">
                  // Open Device
                  libusb_device_handle *device_handle;
                  libusb_open(profileHandle,&amp;device_handle);

                  // Close Device
                  libusb_close(device_handle);
                </code>
                <code>
                  // Open Device
                  MonoUsbDeviceHandle deviceHandle = new MonoUsbDeviceHandle(profileHandle);

                  // Close Device
                  deviceHandle.Close();
                </code>                
              </para>
            </listItem>
            <listItem>
              <a href="http://libusb.sourceforge.net/api-1.0/group__dev.html#gaabaa4193adcabba1789cc1165ac41a03">libusb_ref_device()</a>
            </listItem>
            <listItem>
              <a href="http://libusb.sourceforge.net/api-1.0/group__dev.html#ga3cc62e6a191b7a9f213e62b81ec30f4d">libusb_unref_device()</a>
              <para>
                Device referencing is handled internally by the <CREF>T:MonoLibUsb.Profile.MonoUsbProfileHandle</CREF> class.
              </para>
            </listItem>
            <listItem>
              <a href="http://libusb.sourceforge.net/api-1.0/group__asyncio.html#ga13cc69ea40c702181c430c950121c000">libusb_alloc_transfer()</a>
            </listItem>
            <listItem>
              <a href="http://libusb.sourceforge.net/api-1.0/group__asyncio.html#gabb0932601f2c7dad2fee4b27962848ce">libusb_submit_transfer()</a>
            </listItem>
            <listItem>
              <a href="http://libusb.sourceforge.net/api-1.0/group__asyncio.html#ga685eb7731f9a0593f75beb99727bbe54">libusb_cancel_transfer()</a>
            </listItem>
            <listItem>
              <a href="http://libusb.sourceforge.net/api-1.0/group__asyncio.html#ga6ab8b2cff4de9091298a06b2f4b86cd6">libusb_free_transfer()</a>
              <para>
                Asynchronous device I/O functions are implemented in the <CREF>T:MonoLibUsb.Transfer.MonoUsbTransfer</CREF> structure.
              </para>
            </listItem>
          </list>
          <alert class="warning">
            Asynchronous transfers must be freed by the user with the <CREF>M:MonoLibUsb.Transfer.MonoUsbTransfer.Free</CREF> method. Failure to do so will result in memory leaks. 
          </alert>
        </para>
      </content>
    </foldSection>
    
        <!-- Optional next steps info
    <nextSteps>
      <content><para>Next steps info goes here</para></content>
    </nextSteps>
    -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>