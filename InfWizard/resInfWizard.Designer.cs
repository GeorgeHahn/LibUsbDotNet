//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InfWizard {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class resInfWizard {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal resInfWizard() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("InfWizard.resInfWizard", typeof(resInfWizard).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        internal static System.Drawing.Bitmap CloseFolderImage {
            get {
                object obj = ResourceManager.GetObject("CloseFolderImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InfWizard looks for driver resources in the working directory and the InfWizard.exe path directory..
        /// </summary>
        internal static string DRIVERRESOURCE_NOTFOUND {
            get {
                return ResourceManager.GetString("DRIVERRESOURCE_NOTFOUND", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap InfoImage {
            get {
                object obj = ResourceManager.GetObject("InfoImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This device is connected and does not currently have a device driver (driverless). Install this driver now to start using it right away..
        /// </summary>
        internal static string INSTALLDRIVER_DRIVERLESS_TEXT {
            get {
                return ResourceManager.GetString("INSTALLDRIVER_DRIVERLESS_TEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Driver installation failed, check log for details..
        /// </summary>
        internal static string INSTALLDRIVER_FAILED {
            get {
                return ResourceManager.GetString("INSTALLDRIVER_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A setup package must be generated and drivers must be spawned to use the driver installer feature..
        /// </summary>
        internal static string INSTALLDRIVER_NOPACKAGE_TEXT {
            get {
                return ResourceManager.GetString("INSTALLDRIVER_NOPACKAGE_TEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The driver was successfully installed..
        /// </summary>
        internal static string INSTALLDRIVER_SUCCESS {
            get {
                return ResourceManager.GetString("INSTALLDRIVER_SUCCESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more devices using a {0} service are already installed. The current drivers should be removed before installing this package..
        /// </summary>
        internal static string INSTALLDRIVER_UPDATE_TEXT {
            get {
                return ResourceManager.GetString("INSTALLDRIVER_UPDATE_TEXT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more devices using a {0} service are already installed.  This package may cause system crashes or blue screens if used!.
        /// </summary>
        internal static string INSTALLDRIVER_WINDOWSSERVICE_TEXT {
            get {
                return ResourceManager.GetString("INSTALLDRIVER_WINDOWSSERVICE_TEXT", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap LeftArrowImage {
            get {
                object obj = ResourceManager.GetObject("LeftArrowImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap LudnImage {
            get {
                object obj = ResourceManager.GetObject("LudnImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap OpenFolderImage {
            get {
                object obj = ResourceManager.GetObject("OpenFolderImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap RefreshImage {
            get {
                object obj = ResourceManager.GetObject("RefreshImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This utility makes permanent changes to the windows driver registry..
        /// </summary>
        internal static string REMOVE_DEVICE_WARNING {
            get {
                return ResourceManager.GetString("REMOVE_DEVICE_WARNING", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap RightArrowImage {
            get {
                object obj = ResourceManager.GetObject("RightArrowImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap SaveImage {
            get {
                object obj = ResourceManager.GetObject("SaveImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
        ///
        ///&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
        ///&lt;head&gt;
        ///    &lt;title&gt;#DEVICE_DESCRIPTION# USB setup package&lt;/title&gt;
        ///    &lt;style type=&quot;text/css&quot;&gt;
        ///&lt;!--
        ///body {
        ///	font-family: Tahoma, Verdana, Arial;
        ///	font-size:12px;
        ///}
        ///.title {
        ///	font-weight:bold;
        ///	text-align:center;
        ///	font-size:150%;
        ///}
        ///.copyright {
        ///	font-weight:normal;
        ///	text-align:center;
        ///	font-size:80%;
        ///	text-transform:capitalize [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SETUP_PACKAGE_README_HTM {
            get {
                return ResourceManager.GetString("SETUP_PACKAGE_README_HTM", resourceCulture);
            }
        }
        
        internal static System.Drawing.Bitmap StopImage {
            get {
                object obj = ResourceManager.GetObject("StopImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        internal static System.Drawing.Bitmap YieldImage {
            get {
                object obj = ResourceManager.GetObject("YieldImage", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
